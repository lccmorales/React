{"version":3,"sources":["components/AddForm.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddForm","setCategories","setLimitNumGifs","useState","inputValueSearch","setInputValueSearch","inputValueLimit","setInputValueLimit","onSubmit","e","preventDefault","trim","length","parseInt","cats","type","value","onChange","target","getGifs","category","limitNumGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAU,SAAC,GAA0C,IAAvCC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,gBACtC,EAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAqBA,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEN,EAAiBO,OAAOC,OAAS,GAAKC,SAASP,EAAgBK,QAAU,IACzEV,GAAe,SAAAa,GAAI,OAAMV,GAAN,mBAA2BU,OAC9CT,EAAoB,IACpBH,EAAiBW,SAASP,IAC1BC,EAAmB,OAMnB,wCACA,2BACIQ,KAAK,OACLC,MAAQZ,EACRa,SAzBoB,SAACR,GAC7BJ,EAAoBI,EAAES,OAAOF,UA2BzB,2DACA,2BACID,KAAK,SACLC,MAAQV,EACRW,SA5BmB,SAACR,GAC5BF,EAAmBE,EAAES,OAAOF,UA8BxB,4BAAQD,KAAK,UAAb,Y,uBC1CCI,EAAO,uCAAG,WAAOC,EAAUC,GAAjB,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWJ,GAD/C,kBACoEC,EADpE,sDAEAI,MAAQF,GAFR,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,wDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACtC,OACI,yBAAKc,UAAU,yCACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCDJO,EAAU,SAAC,GAAkC,IAA/BpB,EAA8B,EAA9BA,SACvB,ECHwB,SAAEA,EAAUC,GACpC,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WACPzB,EAASC,EAAUC,GACdwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAErB,EAAUC,IAGRqB,EDd0BK,CAAc3B,EADM,EAApBC,cACpBa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,oCACA,wBAAIJ,UAAU,oCAAqCjB,GAEjDqB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEIdkB,EAnBM,WACjB,MAAsC9C,mBAAS,CAAC,SAAU,iBAA1D,mBAAQ+C,EAAR,KAAoBjD,EAApB,KACA,EAA0CE,mBAAS,GAAnD,mBAAQkB,EAAR,KAAsBnB,EAAtB,KAEA,OACI,oCACI,4CACA,kBAAC,EAAD,CAASD,cAAgBA,EAAgBC,gBAAkBA,IAC3D,6BACA,4BAEQgD,EAAWpB,KAAK,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CAAS4B,IAAM5B,EAAWA,SAAWA,EAAWC,aAAeA,U,MCXvF8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.850679d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddForm = ( { setCategories, setLimitNumGifs } ) => {\n    const [inputValueSearch, setInputValueSearch] = useState('');\n    const [inputValueLimit, setInputValueLimit] = useState('');\n\n    const handleInputSearchChange = (e) => {\n        setInputValueSearch(e.target.value);\n    }\n\n    const handleInputLimitChange = (e) => {\n        setInputValueLimit(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (inputValueSearch.trim().length > 3 && parseInt(inputValueLimit.trim()) > 0) {\n            setCategories( cats => [ inputValueSearch, ...cats,] );\n            setInputValueSearch('');\n            setLimitNumGifs( parseInt(inputValueLimit) );\n            setInputValueLimit('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h3>Busqueda</h3>\n            <input\n                type=\"text\"\n                value={ inputValueSearch }\n                onChange={ handleInputSearchChange }\n            />\n\n            <h3>Cantidad de Gif's a mostrar</h3>\n            <input\n                type=\"number\"\n                value={ inputValueLimit }\n                onChange={ handleInputLimitChange }\n            />\n\n            <button type=\"submit\">Buscar</button>\n        </form>\n    )\n}\n\nAddForm.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n    setLimitNumGifs: PropTypes.func.isRequired\n};","export const getGifs = async( category, limitNumGifs ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=${ limitNumGifs }&api_key=wGFpRizoH8FkJI4Dbmue2wSoctrFUqGq`;\n    const resp = await fetch ( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    // console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n    return (\n        <div className=\"card animate__animated animate__swing\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category, limitNumGifs } ) => {\n    const { data:images, loading } = useFetchGifs( category, limitNumGifs );\n\n    return (\n        <>\n        <h3 className='animate__animated animate__flash'>{ category }</h3>\n\n        { loading && <p className='animate__animated animate__flash'>Loading</p> }\n        \n        <div className='card-grid'>\n            {\n                images.map( img => (\n                    <GifGridItem\n                        key={ img.id }\n                        { ...img }\n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n    limitNumGifs: PropTypes.number.isRequired\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category, limitNumGifs ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category, limitNumGifs )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [ category, limitNumGifs ]);\n\n\n    return state; // {data: [], loading: true}\n}\n","import React, { useState } from 'react';\nimport { AddForm } from './components/AddForm';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [ categories, setCategories ] = useState(['Arcane', 'Demon Slayer']);\n    const [ limitNumGifs, setLimitNumGifs ] = useState(2);\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddForm setCategories={ setCategories } setLimitNumGifs={ setLimitNumGifs }/>\n            <hr />\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid key={ category } category={ category } limitNumGifs={ limitNumGifs }/>\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}